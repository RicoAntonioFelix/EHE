// -*- C++ -*-
// This file is a part of the IncludeOS unikernel - www.includeos.org
//
// Copyright 2017 Oslo and Akershus University College of Applied Sciences
// and Alfred Bratterud
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once
#ifndef INCLUDEOS_ERROR_HPP
#define INCLUDEOS_ERROR_HPP

#include <experimental/string_view>

/**
 * This type is used to flag if an error can be
 * recovered from
 */
struct recoverable final {
  constexpr explicit recoverable(const bool flag) noexcept
    : is_recoverable_{flag}
  {}

  constexpr operator bool() const noexcept
  { return is_recoverable_; }

  const bool is_recoverable_;
}; //< struct recoverable

/**
 * This class is a representation of a generic error
 * object
 */
class Error_t {
public:
  using Type = const std::string; //< Representation of an error type

  /**
   * Default constructor
   */
  Error_t() = default;

  /**
   * Constructor
   *
   * Create an error object by providing the error message as a
   * C-String
   *
   * @param message
   *  The error message
   *
   * @param flag
   *  Flag to indicate if this error can be recovered from
   */
  Error_t(std::string message, const recoverable flag = recoverable{true})
    : flag_{flag}
    , message_{std::move(message)}
  {}

  /**
   * Default copy constructor
   */
  Error_t(const Error_t&) = default;

  /**
   * Default move constructor
   */
  Error_t(Error_t&&) = default;

  /**
   * Default copy assignment operator
   */
  Error_t& operator=(const Error_t&) = default;

  /**
   * Default move assignment operator
   */
  Error_t& operator=(Error_t&&) = default;

  /**
   * Default destructor
   */
  ~Error_t() = default;

  /**
   * Operator to coerce this type to a boolean value
   *
   * @return true if this is a valid error, false otherwise
   */
  operator bool() const noexcept
  { return (not message_.empty()) and (message_.find(':') not_eq std::string::npos); }

  /**
   * Get the type of error
   *
   * @return The type of error
   */
  std::experimental::string_view type() const noexcept
  { return std::experimental::string_view{message_.data(), message_.find(':')}; }

  /**
   * Get the error message
   *
   * @return The error message
   */
  std::experimental::string_view message() const noexcept
  { return std::experimental::string_view{message_.data() + message_.find(':') + 1}; }

  /**
   * Check to see if this error can be recovered from
   *
   * @return true if recoverable, false otherwise
   */
  recoverable is_recoverable() const noexcept
  { return flag_; }

  /**
   * Get a C-String representation of the error object
   *
   * @return A C-String representation of the error object
   */
  const char* c_str() const noexcept
  { return message_.c_str(); }

  /**
   * Get a std::string representation of this class
   *
   * @return A std::string representation of this class
   */
  std::string to_string() const
  { return message_; }

private:
  recoverable flag_ {true};
  std::string message_;
}; //< class Error_t

#endif //< INCLUDEOS_ERROR_HPP
