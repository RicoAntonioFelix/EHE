// -*- C++ -*-
// This file is a part of the IncludeOS unikernel - www.includeos.org
//
// Copyright 2017 Oslo and Akershus University College of Applied Sciences
// and Alfred Bratterud
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

#pragma once
#ifndef INCLUDEOS_ERROR_LOGGER_HPP
#define INCLUDEOS_ERROR_LOGGER_HPP

#include <error>
#include <iostream>

/**
 * This class is used for logging program errors
 * to the standard error stream
 */
class Error_logger final {
private:
  /** Severity levels */
  static constexpr const char* const INFO  {"[ INFO ] "};
  static constexpr const char* const WARN  {"[ WARN ] "};
  static constexpr const char* const FATAL {"[ FATAL ] "};
public:
  /**
   * Log the info error with a context specific message
   *
   * @param message
   *  The context specific message
   *
   * @param err
   *  The error object
   */
  static void info(const std::string& message, const Error_t& err)
  { log_error_message(INFO, message, err); }

  /**
   * Log the warning error with a context specific message
   *
   * @param message
   *  The context specific message
   *
   * @param err
   *  The error object
   */
  static void warn(const std::string& message, const Error_t& err)
  { log_error_message(WARN, message, err); }

  /**
   * Log the fatal error with a context specific message
   *
   * @param message
   *  The context specific message
   *
   * @param err
   *  The error object
   */
  static void fatal(const std::string& message, const Error_t& err)
  { log_error_message(FATAL, message, err); }

  /**
   * Log the panic error with a context specific message and terminate
   * the application
   *
   * @param message
   *  The context specific message
   *
   * @param err
   *  The error object
   */
  static void panic(const std::string& message, const Error_t& err) {
    fatal(message, err);
    std::terminate();
  }
private:
  /**
   * Conceal default constructor
   */
  Error_logger() noexcept = default;

  /** Delete unwanted operations */
  Error_logger(const Error_logger&) = delete;
  Error_logger(Error_logger&&) = delete;
  Error_logger& operator=(const Error_logger&) = delete;
  Error_logger& operator=(Error_logger&&) = delete;

  /**
   * Internal method to log the error
   *
   * @param severity
   *  The severity of the error
   *
   * @param message
   *  The context specific message
   *
   * @param err
   *  The error object
   */
  static void log_error_message(const char* severity, const std::string& message, const Error_t& err)
  { std::cerr << severity << message << ":> " << err.to_string() << '\n'; }
}; //< class Error_logger

#endif //< INCLUDEOS_ERROR_LOGGER_HPP
